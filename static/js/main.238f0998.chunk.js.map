{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["baseURL","headers","Header","props","useState","name","setName","tasks","setTasks","time","setTime","className","Profile","onSubmit","e","preventDefault","fetch","method","body","JSON","stringify","then","json","console","log","onTaskAdded","htmlFor","type","value","onChange","target","size","placeholder","required","Footer","Task","onClick","deleteTask","id","App","posts","setPosts","useEffect","copy","sort","a","b","newPosts","filter","post","_id","data","concat","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.238f0998.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\n\nconst baseURL = \"https://todolist-8cdd.restdb.io/rest/todolost\";\nconst headers = {\n  \"Content-Type\": \"application/json; charset=utf-8\",\n  \"x-apikey\": \"5d90d71c1ce70f637985513f\",\n  \"cache-control\": \"no-cache\"\n};\n\nfunction Header(props) {\n  const [name, setName] = useState(\"\");\n  const [tasks, setTasks] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n\n  const nameChanged = e => {\n    setName(e.target.value);\n  };\n\n  const tasksChanged = e => {\n    setTasks(e.target.value);\n  };\n\n  const timeChanged = e => {\n    setTime(e.target.value);\n  };\n  const onSubmit = e => {\n    e.preventDefault();\n\n    fetch(baseURL, {\n      method: \"post\",\n      headers: headers,\n      body: JSON.stringify({\n        name: name,\n        tasks: tasks,\n        time: time\n      })\n    })\n      .then(e => e.json())\n      .then(e => {\n        console.log(e);\n        props.onTaskAdded(e);\n        setName(\"\");\n        setTasks(\"\");\n        setTime(\"\");\n      });\n  };\n  return (\n    <>\n      <header className=\"head\">Add things to do to your list</header>\n      <Profile name={props.name} />\n\n      <form className=\"formof\" onSubmit={onSubmit}>\n        <label htmlFor=\"name\">Name</label>\n        <input type=\"text\" name=\"name\" value={name} onChange={nameChanged} size=\"25\" placeholder=\"Sarah Davidsen\" required />\n\n        <label htmlFor=\"tasks\">Tasks</label>\n        <input type=\"text\" name=\"tasks\" value={tasks} onChange={tasksChanged} size=\"25\" placeholder=\"Make to do list\" required />\n\n        <label htmlFor=\"time\">Time left(in days)</label>\n        <input type=\"number\" name=\"time\" value={time} onChange={timeChanged} size=\"25\" placeholder=\"1\" required />\n\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </>\n  );\n}\n\nfunction Profile(props) {\n  return <p>Profile {props.name} </p>;\n}\n\nfunction Footer(props) {\n  return (\n    <>\n      <footer className=\"foot\">This is a footer for {props.name}</footer>\n    </>\n  );\n}\n\nfunction Task(props) {\n  return (\n    <article>\n      <h1>{props.name}</h1>\n      <p>{props.tasks}</p>\n      <p>{props.time}:days</p>\n      <button\n        onClick={() => {\n          props.deleteTask(props.id);\n        }}\n      >\n        Delete me\n      </button>\n    </article>\n  );\n}\n\nfunction App() {\n  const name = \"Sarah\"; //pass to profile\n  // const posts = [<Post />]; //pass this to feed\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    fetch(baseURL, {\n      method: \"get\",\n      headers: headers\n    })\n      .then(e => e.json())\n      .then(e => setPosts(e));\n  }, []);\n  const onTaskAdded = data => {\n    setPosts(posts.concat(data));\n  };\n  const copy = [...posts];\n  copy.sort(function(a, b) {\n    return a.time - b.time;\n  });\n\n  const deleteTask = id => {\n    console.log(id);\n    const newPosts = posts.filter(post => {\n      if (post._id != id) {\n        return post;\n      }\n    });\n    setPosts(newPosts);\n\n    fetch(baseURL + \"/\" + id, {\n      method: \"delete\",\n      headers: headers\n    })\n      .then(e => e.json())\n      .then(e => {\n        console.log(e);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>To do list</h1>\n      <Header name={name} onTaskAdded={onTaskAdded} />\n      <p className=\"overline\">The tasks are sorted by time</p>\n      <div className=\"parent\">\n        {copy.map(post => {\n          return <Task deleteTask={deleteTask} key={post._id} id={post._id} tasks={post.tasks} name={post.name} time={post.time} />;\n        })}\n      </div>\n      <Footer name={name} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}